name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install

      - name: Upload built JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ github.sha }}
          path: target/*.jar

  test:
    name: Unit Tests & Code Coverage
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Jacoco code coverage
        run: mvn jacoco:prepare-agent test jacoco:report

      - name: Upload Jacoco report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ github.sha }}
          path: target/site/jacoco

  analyze:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run SpotBugs
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:check

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, analyze]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and tag Docker image
        run: |
          docker build \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo-devops-java:${{ github.sha }} \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo-devops-java:latest \
          .
      - name: Push Docker image (with SHA)
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo-devops-java:${{ github.sha }}

      - name: Push Docker image (latest)
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo-devops-java:latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.64.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.64.1_Linux-64bit.deb

      - name: Scan Docker image with Trivy
        run: |
          trivy image --format json --output trivy-report.json ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo-devops-java:latest

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.sha }}
          path: trivy-report.json
  
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GCloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
          --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
       
      - name: Set Image Tag
        run: |
          sed -i "s|__IMAGE_TAG__|${{ github.sha }}|g" k8s/deployment.yaml
      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/

      - name: Delete existing deployment (if any)
        run: |
          kubectl delete deployment devsu-demo-devops --ignore-not-found=true

      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f k8s/

      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/devsu-demo-devops --timeout=300s